import javax.swing.text.html.HTMLDocument;
import java.io.IOException;
import java.util.*;

/**
 * Created by sheel.pandey on 6/27/2017.
 */
public class WorkComplete {
    /*class work
    {int workId;
    String skill;
     int priority;
     int timeRequired;
     public work(int workid,int priority,int timeRequired,String skill)
     {
         this.workId=workid;
         this.priority=priority;
         this.timeRequired=timeRequired;
         this.skill=skill;
     }

    }*/
   static String skill,designation;
    static int count=0;
   static int priority,timeRequired,jobId;
    public static String[] warehouseScalability(String[] input1,String[] input2)
    {
        HashMap<String,String> skillMapped=new HashMap<>();
        HashMap<String,ArrayList> mappedPriority=new HashMap<>();
        HashMap<Integer,Integer> priorityId=new HashMap<>();
        String output[]=new String[input1.length];
        for(int i=0;i<input1.length;i++)
        {

            String[] input=input1[i].split("#");
            skill = input[0];
            designation = input[1];
            if(!skillMapped.containsKey(skill))
            skillMapped.put(designation,skill);
            System.out.println("skill" + skill + "designation" + designation);

        }
        System.out.println("---"+skillMapped);
        ArrayList<Integer> priorityList=new ArrayList<>();
        ArrayList<Integer> timeRequireds=new ArrayList<>();
        for(int i=0;i<input2.length;i++)
        { String[] input=input2[i].split("#");
            skill=input[0];

            priority=Integer.parseInt(input[1]);
            priorityList.add(priority);
            timeRequired=Integer.parseInt(input[2]);
            timeRequireds.add(timeRequired);
            jobId=Integer.parseInt(input[3]);
            if(!mappedPriority.containsKey(skill))
                mappedPriority.put(skill,priorityList);
            priorityId.put(priority,jobId);

            System.out.println("---"+priorityId);
            System.out.println("skill" + skill + "designation" + designation+"o"+priority+" "+timeRequired+"jobId"+mappedPriority);

        }
        Arrays.sort(priorityList.toArray());
       mappedPriority.put(designation,priorityList);
        System.out.println("---"+mappedPriority);
        Object value=null;
        for (Map.Entry<String, ArrayList> e : mappedPriority.entrySet()) {
            String s=new String();
            ArrayList<Integer>as=e.getValue();
            Iterator<Integer> iter=as.iterator();
            while(iter.hasNext()) {
                System.out.println("value" + iter.next());
              // if(priorityId.containsKey(e.getValue()))
                    value = priorityId.get(iter.next());
                    s=e.getKey()+"#"+value;

                System.out.println(e.getKey() + "e.getValue" +value);
            }
            output[count++]=s;

        }
return output;
    }


    public static void main(String[] args) throws IOException {
        Scanner in = new Scanner(System.in);
        String[] output = null;
        int ip1_size = 0;
        ip1_size = Integer.parseInt(in.nextLine().trim());
        String[] ip1 = new String[ip1_size];
        String ip1_item;
        for(int ip1_i = 0; ip1_i < ip1_size; ip1_i++) {
            try {
                ip1_item = in.nextLine();
            } catch (Exception e) {
                ip1_item = null;
            }
            ip1[ip1_i] = ip1_item;
        }
        int ip2_size = 0;
        ip2_size = Integer.parseInt(in.nextLine().trim());
        String[] ip2 = new String[ip2_size];
        String ip2_item;
        for(int ip2_i = 0; ip2_i < ip2_size; ip2_i++) {
            try {
                ip2_item = in.nextLine();
            } catch (Exception e) {
                ip2_item = null;
            }
            ip2[ip2_i] = ip2_item;
        }
        output = warehouseScalability(ip1,ip2);
        for(int output_i=0; output_i < output.length; output_i++) {
            System.out.println(String.valueOf(output[output_i]));
        }
    }
}

