import java.io.IOException;
import java.lang.reflect.Array;
import java.util.*;

/**
 * Created by sheel.pandey on 6/27/2017.
 */
public class WorkComplete {

   static String skill,designation;
    static int count=0;

   static int priority,timeRequired,jobId;
   public static String [] outpuT(String input,String skill)
   {
       return null;
   }
    public static String[] warehouseScalability(String[] input1,String[] input2)
    {
        HashMap<String,ArrayList> skillMapped=new HashMap<>();
        HashMap<String,ArrayList> mappedPriority=new HashMap<>();
        HashMap<String,ArrayList>mappedTime=new HashMap<>();
        HashMap<Integer,Integer> priorityId=new HashMap<>();
        String output[]=new String[input1.length];
        ArrayList<String> designations=new ArrayList<>();
        String skillArray[]=new String[input1.length];
        for(int i=0;i<input1.length;i++)
        {

            String[] input=input1[i].split("#");

            designation = input[0];
            skill = input[1];
            skillArray[i]=skill;

            if(skillMapped.containsKey(skill)) {
                System.out.println("--contains skill"+skill);
               ArrayList value=skillMapped.get(skill);
                value.add(designation);
                skillMapped.put(skill, value);

            }
            else {
                designations=new ArrayList<>();
                designations.add(designation);
                skillMapped.put(skill, designations);
           //     skills.add(skill);

            }

            System.out.println("skill" + skill + "designation" + designation);
            System.out.println("---"+skillMapped);

        }

        ArrayList<Integer> priorityList=new ArrayList<>();
        ArrayList<Integer> timeRequireds=new ArrayList<>();
        for(int i=0;i<input2.length;i++)
        { String[] input=input2[i].split("#");
            skill=input[0];

            priority=Integer.parseInt(input[1]);
            System.out.println("--priority"+priority);

            timeRequired=Integer.parseInt(input[2]);

            jobId=Integer.parseInt(input[3]);
            if(mappedTime.containsKey(skill))
            {
                ArrayList times=mappedTime.get(skill);
                System.out.println("times---"+times);

                times.add(timeRequired);
                mappedTime.put(skill,times);

            }
            else
            {
                timeRequireds=new ArrayList<>();
                timeRequireds.add(timeRequired);
                mappedTime.put(skill,timeRequireds);
            }
            if(mappedPriority.containsKey(skill))
            {
                ArrayList values=mappedPriority.get(skill);
                values.add(priority);
                mappedPriority.put(skill,values);

            }
            else
            {
                priorityList=new ArrayList<>();
                priorityList.add(priority);
                mappedPriority.put(skill,priorityList);
            }

            priorityId.put(timeRequired,jobId);


            System.out.println("skill" + skill +mappedTime+" "+timeRequired+"jobId"+mappedPriority);

        }
        Arrays.sort(priorityList.toArray());

        System.out.println("---"+priorityList);
        Object value=null;


            String s=new String();


       //     Arrays.sort(as.toArray());

            for(int i=0;i<input1.length-1;i++) {
                int maxTime=0,minTime=0;
                int secondMax=0,secondMin=0;

              //  System.out.println("value" + iter.next());
              // if(priorityId.containsKey(e.getValue()))
                String valu=skillArray[i];
                System.out.println("---value"+valu);
                    value = priorityId.get(valu);
                    ArrayList<String> workSkill=skillMapped.get(valu);
                   ArrayList<Integer> list=mappedTime.get(valu);
                System.out.println("---SkillMapped"+list);

                Iterator iterator=list.iterator();

                    while (iterator.hasNext()) {
                        int y = (int) iterator.next();
                        if (y > maxTime) {
                            secondMax = maxTime;
                            maxTime = y;
                            minTime=y;

                        } else if (y > secondMax && y>minTime) {
                            secondMax = y;
                           // minTime=secondMax;

                        }
                        else {
                            minTime=y;
                        }

                }
                if(workSkill.size()>1)
                {
                  s=  workSkill.get(0);
                }
                s=s+"#"+mappedTime.get(maxTime)+mappedTime.get(secondMax);
                System.out.println("--maxTime"+maxTime+"minTime"+minTime+"sec"+secondMax);




                System.out.println("-----"+s);
            }


            output[count]=s;
count++;


return output;
    }


    public static void main(String[] args) throws IOException {
        Scanner in = new Scanner(System.in);
        String[] output = null;
        int ip1_size = 0;
        ip1_size = Integer.parseInt(in.nextLine().trim());
        String[] ip1 = new String[ip1_size];
        String ip1_item;
        for(int ip1_i = 0; ip1_i < ip1_size; ip1_i++) {
            try {
                ip1_item = in.nextLine();
            } catch (Exception e) {
                ip1_item = null;
            }
            ip1[ip1_i] = ip1_item;
        }
        int ip2_size = 0;
        ip2_size = Integer.parseInt(in.nextLine().trim());
        String[] ip2 = new String[ip2_size];
        String ip2_item;
        for(int ip2_i = 0; ip2_i < ip2_size; ip2_i++) {
            try {
                ip2_item = in.nextLine();
            } catch (Exception e) {
                ip2_item = null;
            }
            ip2[ip2_i] = ip2_item;
        }
        output = warehouseScalability(ip1,ip2);
        for(int output_i=0; output_i < output.length; output_i++) {
            System.out.println(String.valueOf(output[output_i]));
        }
    }
}

