import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.InputMismatchException;
 
 class City{
    int id;
    int grp;
    
    public City(int c,int g){
        id=c;
        grp=g;
    }
    public int getGrp(){
        return grp;
    }
    public int getID(){
        return id;
    }
}
public class CityGroup {
    
    public static void main(String[] args) {
        InputReader sc = new InputReader(System.in);
        OutputWriter out =new OutputWriter(System.out);
        int n=sc.readInt();
        int k=sc.readInt();
        City ct[]=new City[n];
        for(int i=1;i<=k;i++){
            int s=sc.readInt();
            for(int j=1;j<=s;j++){
                int c=sc.readInt()-1;
                ct[c]=new City(c+1,i);
            }
        }
        int q=sc.readInt();
        for(int i=1;i<=q;i++){
            int x=sc.readInt()-1;
            int y=sc.readInt()-1;
            int time=0,t1=0,t2=0;
            if(ct[x].getGrp()==ct[y].getGrp())
                time=0;
            else{
                if((ct[x].getGrp()==1 && ct[y].getGrp()==k)||(ct[y].getGrp()==1 && ct[x].getGrp()==k))
                    time=1;
                else if(ct[x].getGrp() > ct[y].getGrp()){
                    t1=ct[x].getGrp()-ct[y].getGrp();
                    t2=(ct[y].getGrp()-1)+(k-ct[x].getGrp())+1;
                    time=Math.min(t1, t2);
                }
                else{
                    t1=ct[y].getGrp()-ct[x].getGrp();
                    t2=(ct[x].getGrp()-1)+(k-ct[y].getGrp())+1;
                    time=Math.min(t1, t2);
                }
            }
            out.print(time);
            out.printLine();
            out.flush();
        }
    }
    
}
class InputReader {
 
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;
		private SpaceCharFilter filter;
 
		public InputReader(InputStream stream) {
			this.stream = stream;
		}
 
		public int read() {
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars) {
				curChar = 0;
				try {
					numChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (numChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}
 
		public int readInt() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}
 
		public String readString() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}
 
		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
 
		public String next() {
			return readString();
		}
 
		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}
 
class OutputWriter {
		private final PrintWriter writer;
 
		public OutputWriter(OutputStream outputStream) {
			writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
		}
 
		public OutputWriter(Writer writer) {
			this.writer = new PrintWriter(writer);
		}
 
		public void print(Object...objects) {
			for (int i = 0; i < objects.length; i++) {
				if (i != 0)
					writer.print(' ');
				writer.print(objects[i]);
			}
		}
 
		public void printLine(Object...objects) {
			print(objects);
			writer.println();
		}
 
		public void close() {
			writer.close();
		}
 
		public void flush() {
			writer.flush();
		}
 
		}
 
class IOUtils {
 
		public static int[] readIntArray(InputReader in, int size) {
			int[] array = new int[size];
			for (int i = 0; i < size; i++)
				array[i] = in.readInt();
			return array;
		}
		}
